/* 1579. Remove Max Number of Edges to Keep Graph Fully Traversable
  Link: https://leetcode.com/problems/remove-max-number-of-edges-to-keep-graph-fully-traversable/description/
*/
using PII = pair<int, int> ;
class Solution {
    vector<int>Father ;
    int findFather(int a){
        if(a != Father[a])
            Father[a] = findFather(Father[a]) ;
        return Father[a] ;
    }
    void unionSet(int a, int b){
        a = findFather(a) ;
        b = findFather(b) ;
        if( a < b)
            Father[b] = a ;
        else
            Father[a] = b ;
    }
public:
    int maxNumEdgesToRemove(int n, vector<vector<int>>& edges) {
        Father.resize(n+1) ;
        for(int i = 0; i <= n; i++)
            Father[i] = i ;
        vector<vector<PII>>graph(4) ;
        for(auto& e : edges){
            int t = e[0] ;
            int u = e[1] ;
            int v = e[2] ;
            graph[t].push_back({u, v}) ;
        }
        int count0 = 0, count1 = 0, count2 = 0 ;
        for(auto e: graph[3]){
            int u = e.first ;
            int v = e.second ;
            if(findFather(u) != findFather(v)){
                count0++ ;
                unionSet(u, v) ;
            }
        }
        vector<int>backFather = Father ;
        for(auto e: graph[1]){
            int u = e.first ;
            int v = e.second ;
            if(findFather(u) != findFather(v)){
                count1++ ;
                unionSet(u, v) ;
            }
        }
        if(count0 + count1 < n-1)
            return -1 ;
        
        Father = backFather ;
        for(auto& e: graph[2]){
            int u = e.first ;
            int v = e.second ;
            if(findFather(u) != findFather(v)){
                count2++ ;
                unionSet(u, v) ;
            }
        }

        if(count0 + count2 < n-1)
            return -1 ;
        
        return edges.size() - count0 - count1 - count2 ;
    }
};
