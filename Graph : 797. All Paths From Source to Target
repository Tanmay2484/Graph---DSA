/* 797. All Paths From Source to Target
   Link: https://leetcode.com/problems/all-paths-from-source-to-target/description/
*/
class Solution {
public:
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
       int n=graph.size();
        vector<int>path;
        vector<vector<int>>paths;
        vector<bool>vis(n,false);
        dfs(path,paths,vis,graph,0,n-1);
        return paths;
    }
    void dfs(vector<int>&path , vector<vector<int>>&paths, vector<bool>&vis,vector<vector<int>>&graph,  int src ,int dest){
        path.push_back(src);
        if(src==dest){
            paths.push_back(path);
            path.pop_back();
            return ;
        }
        vis[src]=true;
        for(auto v:graph[src])
            if(!vis[v]) dfs(path,paths,vis,graph,v,dest);
        
        path.pop_back();
        vis[src]=false;
        return ;
    }
};
